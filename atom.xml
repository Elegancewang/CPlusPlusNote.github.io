<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://elegancewang.github.io/CPlusPlusNote.github.io</id>
    <title>Renzo&apos;s Blog</title>
    <updated>2020-11-08T12:20:31.623Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://elegancewang.github.io/CPlusPlusNote.github.io"/>
    <link rel="self" href="https://elegancewang.github.io/CPlusPlusNote.github.io/atom.xml"/>
    <logo>https://elegancewang.github.io/CPlusPlusNote.github.io/images/avatar.png</logo>
    <icon>https://elegancewang.github.io/CPlusPlusNote.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Renzo&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[密码学]]></title>
        <id>https://elegancewang.github.io/CPlusPlusNote.github.io/post/tu-jie-mi-ma-ji-zhu-ri-jie-cheng-hao-zong-jie/</id>
        <link href="https://elegancewang.github.io/CPlusPlusNote.github.io/post/tu-jie-mi-ma-ji-zhu-ri-jie-cheng-hao-zong-jie/">
        </link>
        <updated>2020-10-02T12:41:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="423明文分组与密文分组">4.2.3明文分组与密文分组</h3>
<h2 id="44-cbc模式">4.4 CBC模式</h2>
<h3 id="441-说明">4.4.1 说明</h3>
<p>CBC</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[WebRTC 环境配置（Windows 平台）]]></title>
        <id>https://elegancewang.github.io/CPlusPlusNote.github.io/post/webrtc-huan-jing-pei-zhi/</id>
        <link href="https://elegancewang.github.io/CPlusPlusNote.github.io/post/webrtc-huan-jing-pei-zhi/">
        </link>
        <updated>2020-09-16T00:40:46.000Z</updated>
        <content type="html"><![CDATA[<p>万事开头难啊，webRTC配置过程中遇到的问题多种多样，有些问题很难搜索到，因此我记录下来供自己参考。</p>
<h1 id="写在前面的话">写在前面的话</h1>
<p>鉴于WebRTC更新太快，所以网上很多编译方法都失效了，所以如果你看到是几年前的文章，就没必要较真了。本文写作时间为2020年9月16日，WebRTC为当前最新版本。请诸君参考。（另，本人所在地为HK，因此不需要稳定的梯子，希望大家能找到稳定的梯子。）</p>
<h1 id="1准备">1.准备</h1>
<p>a) <strong>Win 10 64bit 1909</strong></p>
<p>b) <strong>Visual Studio 2019 Community 16.7.30503.244</strong></p>
<p>c) <strong>Windows 10 SDK</strong><br>
Windows 10.0.19041.1<br>
<img src="https://elegancewang.github.io/CPlusPlusNote.github.io/post-images/1600217267438.png" alt="" loading="lazy"></p>
<p>d) <strong>Python</strong></p>
<p>Python 3.8.5 64bit，编译过程中需添加到Path环境变量</p>
<p>f) <strong>depot_tools</strong><br>
depot_tools是包含下载、编译的相关工具，需要先下载并配置它，才能继续后面的操作。<br>
下载地址:<a href="https://storage.googleapis.com/chrome-infra/depot_tools.zip">depot_tools</a></p>
<p>下载后解压，并将解压好的depot_tools目录添加到path系统环境变量中，如下图所示：</p>
<figure data-type="image" tabindex="1"><img src="https://elegancewang.github.io/CPlusPlusNote.github.io/post-images/1600218587975.png" alt="" loading="lazy"></figure>
<h1 id="2-环境变量配置">2 环境变量配置</h1>
<p>有大量的环境变量需要配置，如果在cmd中set需要保持该窗口。一般在系统环境变量编辑里比较简单方便。<br>
最开始我的设置如下：</p>
<pre><code>DEPOT_TOOLS_UPDATE=0                                 #不更新depot_tools
DEPOT_TOOLS_WIN_TOOLCHAIN=0                          #编译时使用本机VS工具链
GYP_MSVS_VERSION = 2019                              #指定VS版本
GYP_MSVS_OVERRIDE_PATH = C:\Program Files (x86)\Microsoft Visual Studio\2019\Community  #vs安装路径，替换成自己的
GYP_GENERATORS=msvs-ninja,ninja                      #使用ninja编译

</code></pre>
<p><strong>Error</strong><br>
depot_tools/python3_bin_reldir.txt: No such file or directory<br>
failed to determine Python version</p>
<p>我认为是环境变量阻止了其在Windows下的引导，因此删去<code>DEPOT_TOOLS_UPDATE=0</code> 的环境变量即可.</p>
<h1 id="3获取webrtc源码">3.获取WebRTC源码</h1>
<p>接着执行<code>gclient</code>命令，安装编译需要用到的一些工具，比如git以及python。</p>
<p>其他的环境变量我们已经在前文设置，无需通过cmd进行设置，这是为了我自己的方便，如果对于环境变量有要求，请在cmd自行设置，例：</p>
<pre><code>set vs2019_install=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community
set GYP_MSVS_OVERRIDE_PATH=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community 
set GYP_GENERATORS=msvs-ninja,ninja
# 告诉depot_tools使用我们本机的VS进行编译
set DEPOT_TOOLS_WIN_TOOLCHAIN=0

</code></pre>
<p>然后cd到要放源码的地方（要遵守前面说的磁盘要求），执行：</p>
<pre><code>mkdir webrtc-checkout
cd webrtc-checkout
fetch --nohooks webrtc
gclient sync

</code></pre>
<p>这一过程的时间比较长，包括源码以及一些测试的音视频文件资源等。如果没有稳定快速的梯子需要等待较长时间。</p>
<p>如果因为网络等原因中断了，就再执行<code>gclient sync</code>。如果这一步一直卡着不动，可以执行<code>ctrl+c</code>，然后执行<code>gclient sync</code>。</p>
<h1 id="4编译">4.编译</h1>
<p>生成VS2019工程文件：</p>
<pre><code>cd src
gn gen --ide=vs out/Default

</code></pre>
<p>可以在src\out\Default\ 下得到 all.sln解决方案文件。</p>
<p>如果不想使用默认编译参数，可以使用gn args out/Default --list查看当前编译参数，通过类似如下方式设置：<br>
<code>gn gen --ide=vs out/Default --args=“use_rtti=true is_clang=false rtc_build_tools=false rtc_include_tests=false rtc_build_examples=false”</code></p>
<p>接着执行编译命令：</p>
<pre><code>ninja -C out/Default
</code></pre>
<h1 id="代码更新">代码更新</h1>
<pre><code>git checkout master
git pull origin master
gclient sync

</code></pre>
<h1 id="引用webrtc库">引用WebRTC库</h1>
<p>WebRTC编译后会在src\out\Default\obj目录下生成整个WebRTC工程的静态库：webrtc.lib，链接下这个就可以了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++学习笔记]]></title>
        <id>https://elegancewang.github.io/CPlusPlusNote.github.io/post/learnC/</id>
        <link href="https://elegancewang.github.io/CPlusPlusNote.github.io/post/learnC/">
        </link>
        <updated>2020-07-22T06:01:37.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="chapter-8">Chapter 8</h1>
<p>指针、引用<br>
<strong>指针</strong>—— 存储内存地址<br>
<strong>变量</strong> ——占用空间、声明、初始化（否则值为随机）</p>
<h2 id="81-运算符">8.1 运算符</h2>
<h3 id="11-使用引用运算符获取变量地址">1.1 使用引用运算符（&amp;）获取变量地址</h3>
<p>e.g. Varname —— 变量<br>
&amp;Varname —— 存储该变量内存地址</p>
<h3 id="12-使用接触引用运算符">1.2   使用接触引用运算符（*）</h3>
<p>以此访问包含地址的值<br>
e.g. 有合法指针——pData<br>
那么该指针地址处存储的值可用 *pData 来获取</p>
<h3 id="13-sizeof">1.3 sizeof()</h3>
<pre><code>用于指针时，结果取决于编译器及针对的操作系统，与指针变量无关。
</code></pre>
<h2 id="82-动态内存分配">8.2 动态内存分配</h2>
<h3 id="1-关键字new-delete-动态分配和释放内存">1. 关键字new &amp; delete 动态分配和释放内存</h3>
<p><strong>new分配新的内存块，若成功，返回一个指针，指向新分配的内存，否则引发异常（使用时，指定数据类型分配内存）</strong><br>
Type* Pointer = new Type;<br>
Type* Pointer = new Type[ Num Elements ];<br>
e.g.</p>
<pre><code class="language-cpp">int * pNumber = new int;
int * pNumber = new int[ 10 ];
</code></pre>
<p><em>注 ：请求分配内存并不保证请求能够得到满足，取决于系统状态机内存资源的可用性。</em><br>
<strong>使用关键字 <strong>new</strong> 分配的内存最终使用对应的关键字 <strong>delete</strong> 释放</strong><br>
Type* Pointer = new Type;<br>
delete Pointer;<br>
或<br>
Type* Pointer = new Type[ Num Elements ];<br>
delete [] Pointer;</p>
<h3 id="2-递增-递减-运算符作用于指针的结果">2. 递增（++）、递减（--）运算符作用于指针的结果</h3>
<p>对指针执行递增 / 递减， 指向的是内存中相邻的值，而不是相邻的字节（除非值的长度刚好1字节，例如char）<br>
Type * pType = Address;<br>
++pType --&gt; Adress + sizeof( Type )</p>
<h3 id="3-关键字const作用于指针">3. 关键字const作用于指针</h3>
<p>const指针有三种：<br>
a ）指针直线的数据为常量，不可修改，但可以修改包含的地址（指针可指向其他地址）<br>
b ) 指针包含地址为常量，不能修改，可以修改数据<br>
c ) 最为严格的情况，地址及值均为常量，均不可修改，但更易于维护。</p>
<h3 id="4-将指针传递给函数">4. 将指针传递给函数</h3>
<p><em>将内存空间传递给函数，其中可包含值，可包含结果</em><br>
注意传入的数据是否需要修改或者经过计算。</p>
<h3 id="5-数组与指针">5. 数组与指针</h3>
<p>可以将数组变量赋值给类型相同的指针。</p>
<h2 id="83-常见错误">8.3 常见错误</h2>
<h3 id="1内存泄露">1.内存泄露</h3>
<p>常见原因是未正确释放内存</p>
<h3 id="2指向无效的内存单元">2.指向无效的内存单元</h3>
<p>无效指针</p>
<h3 id="3悬浮指针">3.悬浮指针</h3>
<p><em>亦可称之为迷途/失控指针</em><br>
为便面此类问题，初始化/释放指针后将其置为NULL，并在解除引用前（使用关键字 ** * **）检查其是否有效。</p>
<h2 id="84-编程实践">8.4 编程实践</h2>
<p>Step1 初始化指针变量<br>
step2 使用前判断指针是否为NULL——&gt;异常处理，在new（创建指针）失败时妥善退出<br>
Step3 仅在其有效时使用<br>
Step4 new之后必用关键字delete释放内存，且delete后不再访问该指针</p>
<h2 id="85-引用">8.5 引用（&amp;）</h2>
<p>引用是变量的别名（相应变量的的另一个名字，指向相同的内存单元）</p>
<pre><code class="language-cpp">VarType Original = Value;
VarType &amp; ReferenceVariable = Original;

</code></pre>
<h3 id="1引用的用处">1.引用的用处</h3>
<p>避免了传参时因参数占用内存过大，复制时也会开销很大。</p>
<h3 id="2-const-用于引用">2. const 用于引用</h3>
<p>禁止通过引用修改其指向的变量的值。</p>
<p>const引用参数不能作用于左值</p>
<h3 id="3-按引用向函数传递参数">3. 按引用向函数传递参数</h3>
<p>可避免将形参复制给形参，从而极大提高性能。然而，让被调用的函数直接使用调用函数栈时，确保被调用函数不能修改调用函数中的变量很重要。因此，可将引用声明为const</p>
<h1 id="chapter-9-类和对象">Chapter 9 类和对象</h1>
<h2 id="91-类和对象简述">9.1 类和对象简述</h2>
<h3 id="1-类的声明">1.  类的声明</h3>
<p>关键字 <strong>class</strong> 依次包含类名、成员属性、方法（属于类成员的函数）及结尾分号（<strong>;</strong>）<br>
即通过关键字<strong>class</strong>创建数据类型，并<mark>封装</mark>属性。</p>
<p>&quot;封装&quot; 将数据及使用它们的方法进行逻辑编组</p>
<h3 id="2实例化对象">2.实例化对象</h3>
<p>在使用时，根据类实例化一个对象，通过对象访问成员方法及属性。</p>
<pre><code class="language-cpp">class Human
{
    string Name;
    string DateofBirth;

    void Talk( string TexttoTalk );
};
</code></pre>
<p>那么实例化一个对象Tom</p>
<pre><code class="language-cpp">//方法一
Human Tom;

//方法二
Human* pAnotherHuman = new Human( );
delete pAnotherHuman;
</code></pre>
<h3 id="3通过句点运算符访问成员">3.通过句点运算符（.）访问成员</h3>
<p>句点运算符（.）用于访问对象的属性。这同样适用于方法。</p>
<pre><code class="language-cpp">
Human Tom;

Tom. DateofBirth = &quot;1970&quot; ;

Huamn* pTom = new Human();
(*pTom).IntroduceSelf();//使用间接运算符（*）获取对象，再使用句点运算符来访问成员。
</code></pre>
<h3 id="4-使用指针运算符访问成员-">4. 使用指针运算符访问成员（-&gt;）</h3>
<p>若对象使用new实例化或有指向对象的指针，则可以使用 **指针运算符（-&gt;）**来访问成员属性和方法。</p>
<h1 id="chapter-11">Chapter 11</h1>
<p>**</p>
<h2 id="111-多态基础">11.1.  多态基础</h2>
<h3 id="11">1.1</h3>
<p><strong>类之间存在层次结构，类是通过继承相关联时，通过多态来表示。</strong><br>
多态意味着调用成员函数时，根据函数的对象类型执行不同的方法。（而不是调用预设的基类中的函数方法），即表现实际类型。</p>
<h3 id="12">1.2</h3>
<p><strong>使用虚函数实现多态行为</strong></p>
<p>将基类中方法声明为虚函数，使用关键字 virtual， 确保编译器调用覆盖版本（子类、派生类）。</p>
<p><mark>多态行为</mark> 将派生类对象视为几类对象，并执行派生类的函数（方法）实现。</p>
<h3 id="13-为何需要虚构造函数">1.3 为何需要<mark>虚构造函数</mark></h3>
<p>除了需要使用派生类对象，还需要避免计算机资源未释放、内存泄露等问题（即将实例化的派生类对象，将其值赋给基类当做指针，并通过该指针调用 delete， 将不会调用派生类的析构函数）</p>
<pre><code>												**⬇**
</code></pre>
<p>那么将析构函数声明为虚函数，确保通过基类指针调用delete时，不会调用派生类析构函数</p>
<pre><code class="language-cpp">class Base
{
public:
	virtual ~Base()		
};

</code></pre>
<h3 id="auto-关键字">auto 关键字</h3>
<p>利用auto关键字，通过编译器检查变量的初始值，并将该变量类型设置为该返回值的类型。能够简化编码工作。</p>
<pre><code class="language-cpp">std::vector&lt;int&gt; MyNumbers;
	//常规
	for (vector&lt;int&gt;::const_iterator Iterator =  MyNumbers.begin(); 
		Iterator &lt; MyNumbers.end(); ++Iterator )
	std::cout &lt;&lt; * Iterator&lt;&lt; &quot; &quot;;
	//利用auto关键字
		for (auto Iterator =  MyNumbers.begin(); 
		Iterator &lt; MyNumbers.end(); ++Iterator )
	std::cout &lt;&lt; * Iterator&lt;&lt; &quot; &quot;;
</code></pre>
<p>**</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于]]></title>
        <id>https://elegancewang.github.io/CPlusPlusNote.github.io/post/about/</id>
        <link href="https://elegancewang.github.io/CPlusPlusNote.github.io/post/about/">
        </link>
        <updated>2019-01-25T11:09:48.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>欢迎来到我的小站呀，很高兴遇见你！🤝 #KTBFFH 💙 CHELSEA</p>
</blockquote>
<h2 id="关于本站">🏠 关于本站</h2>
<p>重新开始学习计算机语言，</p>
<h2 id="博主是谁">👨‍💻 博主是谁</h2>
<h2 id="兴趣爱好">⛹ 兴趣爱好</h2>
<p>CHELSEA、DOTA</p>
<h2 id="联系我呀">📬 联系我呀</h2>
<p>githubwrz@163.com</p>
]]></content>
    </entry>
</feed>