<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://elegancewang.github.io/CPlusPlusNote.github.io</id>
    <title>My Notes</title>
    <updated>2020-09-05T12:08:05.503Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://elegancewang.github.io/CPlusPlusNote.github.io"/>
    <link rel="self" href="https://elegancewang.github.io/CPlusPlusNote.github.io/atom.xml"/>
    <logo>https://elegancewang.github.io/CPlusPlusNote.github.io/images/avatar.png</logo>
    <icon>https://elegancewang.github.io/CPlusPlusNote.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, My Notes</rights>
    <entry>
        <title type="html"><![CDATA[C++学习笔记]]></title>
        <id>https://elegancewang.github.io/CPlusPlusNote.github.io/post/learnC/</id>
        <link href="https://elegancewang.github.io/CPlusPlusNote.github.io/post/learnC/">
        </link>
        <updated>2020-07-22T06:01:37.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="chapter-8">Chapter 8</h1>
<p>指针、引用<br>
<strong>指针</strong>—— 存储内存地址<br>
<strong>变量</strong> ——占用空间、声明、初始化（否则值为随机）</p>
<h2 id="81-运算符">8.1 运算符</h2>
<h3 id="11-使用引用运算符获取变量地址">1.1 使用引用运算符（&amp;）获取变量地址</h3>
<p>e.g. Varname —— 变量<br>
&amp;Varname —— 存储该变量内存地址</p>
<h3 id="12-使用接触引用运算符">1.2   使用接触引用运算符（*）</h3>
<p>以此访问包含地址的值<br>
e.g. 有合法指针——pData<br>
那么该指针地址处存储的值可用 *pData 来获取</p>
<h3 id="13-sizeof">1.3 sizeof()</h3>
<pre><code>用于指针时，结果取决于编译器及针对的操作系统，与指针变量无关。
</code></pre>
<h2 id="82-动态内存分配">8.2 动态内存分配</h2>
<h3 id="1-关键字new-delete-动态分配和释放内存">1. 关键字new &amp; delete 动态分配和释放内存</h3>
<p><strong>new分配新的内存块，若成功，返回一个指针，指向新分配的内存，否则引发异常（使用时，指定数据类型分配内存）</strong><br>
Type* Pointer = new Type;<br>
Type* Pointer = new Type[ Num Elements ];<br>
e.g.</p>
<pre><code class="language-cpp">int * pNumber = new int;
int * pNumber = new int[ 10 ];
</code></pre>
<p><em>注 ：请求分配内存并不保证请求能够得到满足，取决于系统状态机内存资源的可用性。</em><br>
<strong>使用关键字 <strong>new</strong> 分配的内存最终使用对应的关键字 <strong>delete</strong> 释放</strong><br>
Type* Pointer = new Type;<br>
delete Pointer;<br>
或<br>
Type* Pointer = new Type[ Num Elements ];<br>
delete [] Pointer;</p>
<h3 id="2-递增-递减-运算符作用于指针的结果">2. 递增（++）、递减（--）运算符作用于指针的结果</h3>
<p>对指针执行递增 / 递减， 指向的是内存中相邻的值，而不是相邻的字节（除非值的长度刚好1字节，例如char）<br>
Type * pType = Address;<br>
++pType --&gt; Adress + sizeof( Type )</p>
<h3 id="3-关键字const作用于指针">3. 关键字const作用于指针</h3>
<p>const指针有三种：<br>
a ）指针直线的数据为常量，不可修改，但可以修改包含的地址（指针可指向其他地址）<br>
b ) 指针包含地址为常量，不能修改，可以修改数据<br>
c ) 最为严格的情况，地址及值均为常量，均不可修改，但更易于维护。</p>
<h3 id="4-将指针传递给函数">4. 将指针传递给函数</h3>
<p><em>将内存空间传递给函数，其中可包含值，可包含结果</em><br>
注意传入的数据是否需要修改或者经过计算。</p>
<h3 id="5-数组与指针">5. 数组与指针</h3>
<p>可以将数组变量赋值给类型相同的指针。</p>
<h2 id="83-常见错误">8.3 常见错误</h2>
<h3 id="1内存泄露">1.内存泄露</h3>
<p>常见原因是未正确释放内存</p>
<h3 id="2指向无效的内存单元">2.指向无效的内存单元</h3>
<p>无效指针</p>
<h3 id="3悬浮指针">3.悬浮指针</h3>
<p><em>亦可称之为迷途/失控指针</em><br>
为便面此类问题，初始化/释放指针后将其置为NULL，并在解除引用前（使用关键字 ** * **）检查其是否有效。</p>
<h2 id="84-编程实践">8.4 编程实践</h2>
<p>Step1 初始化指针变量<br>
step2 使用前判断指针是否为NULL——&gt;异常处理，在new（创建指针）失败时妥善退出<br>
Step3 仅在其有效时使用<br>
Step4 new之后必用关键字delete释放内存，且delete后不再访问该指针</p>
<h2 id="85-引用">8.5 引用（&amp;）</h2>
<p>引用是变量的别名（相应变量的的另一个名字，指向相同的内存单元）</p>
<pre><code class="language-cpp">VarType Original = Value;
VarType &amp; ReferenceVariable = Original;

</code></pre>
<h3 id="1引用的用处">1.引用的用处</h3>
<p>避免了传参时因参数占用内存过大，复制时也会开销很大。</p>
<h3 id="2-const-用于引用">2. const 用于引用</h3>
<p>禁止通过引用修改其指向的变量的值。</p>
<p>const引用参数不能作用于左值</p>
<h3 id="3-按引用向函数传递参数">3. 按引用向函数传递参数</h3>
<p>可避免将形参复制给形参，从而极大提高性能。然而，让被调用的函数直接使用调用函数栈时，确保被调用函数不能修改调用函数中的变量很重要。因此，可将引用声明为const</p>
<h1 id="chapter-9-类和对象">Chapter 9 类和对象</h1>
<h2 id="91-类和对象简述">9.1 类和对象简述</h2>
<h3 id="1-类的声明">1.  类的声明</h3>
<p>关键字 <strong>class</strong> 依次包含类名、成员属性、方法（属于类成员的函数）及结尾分号（<strong>;</strong>）<br>
即通过关键字<strong>class</strong>创建数据类型，并<mark>封装</mark>属性。</p>
<p>&quot;封装&quot; 将数据及使用它们的方法进行逻辑编组</p>
<h3 id="2实例化对象">2.实例化对象</h3>
<p>在使用时，根据类实例化一个对象，通过对象访问成员方法及属性。</p>
<pre><code class="language-cpp">class Human
{
    string Name;
    string DateofBirth;

    void Talk( string TexttoTalk );
};
</code></pre>
<p>那么实例化一个对象Tom</p>
<pre><code class="language-cpp">//方法一
Human Tom;

//方法二
Human* pAnotherHuman = new Human( );
delete pAnotherHuman;
</code></pre>
<h3 id="3通过句点运算符访问成员">3.通过句点运算符（.）访问成员</h3>
<p>句点运算符（.）用于访问对象的属性。这同样适用于方法。</p>
<pre><code class="language-cpp">
Human Tom;

Tom. DateofBirth = &quot;1970&quot; ;

Huamn* pTom = new Human();
(*pTom).IntroduceSelf();//使用间接运算符（*）获取对象，再使用句点运算符来访问成员。
</code></pre>
<h3 id="4-使用指针运算符访问成员-">4. 使用指针运算符访问成员（-&gt;）</h3>
<p>若对象使用new实例化或有指向对象的指针，则可以使用 **指针运算符（-&gt;）**来访问成员属性和方法。</p>
<h1 id="chapter-11">Chapter 11</h1>
<p>**</p>
<h2 id="111-多态基础">11.1.  多态基础</h2>
<h3 id="11">1.1</h3>
<p><strong>类之间存在层次结构，类是通过继承相关联时，通过多态来表示。</strong><br>
多态意味着调用成员函数时，根据函数的对象类型执行不同的方法。（而不是调用预设的基类中的函数方法），即表现实际类型。</p>
<h3 id="12">1.2</h3>
<p><strong>使用虚函数实现多态行为</strong></p>
<p>将基类中方法声明为虚函数，使用关键字 virtual， 确保编译器调用覆盖版本（子类、派生类）。</p>
<p><mark>多态行为</mark> 将派生类对象视为几类对象，并执行派生类的函数（方法）实现。</p>
<h3 id="13-为何需要虚构造函数">1.3 为何需要<mark>虚构造函数</mark></h3>
<p>除了需要使用派生类对象，还需要避免计算机资源未释放、内存泄露等问题（即将实例化的派生类对象，将其值赋给基类当做指针，并通过该指针调用 delete， 将不会调用派生类的析构函数）</p>
<pre><code>												**⬇**
</code></pre>
<p>那么将析构函数声明为虚函数，确保通过基类指针调用delete时，不会调用派生类析构函数</p>
<pre><code class="language-cpp">class Base
{
public:
	virtual ~Base()		
};

</code></pre>
<h3 id="auto-关键字">auto 关键字</h3>
<p>利用auto关键字，通过编译器检查变量的初始值，并将该变量类型设置为该返回值的类型。能够简化编码工作。</p>
<pre><code class="language-cpp">std::vector&lt;int&gt; MyNumbers;
	//常规
	for (vector&lt;int&gt;::const_iterator Iterator =  MyNumbers.begin(); 
		Iterator &lt; MyNumbers.end(); ++Iterator )
	std::cout &lt;&lt; * Iterator&lt;&lt; &quot; &quot;;
	//利用auto关键字
		for (auto Iterator =  MyNumbers.begin(); 
		Iterator &lt; MyNumbers.end(); ++Iterator )
	std::cout &lt;&lt; * Iterator&lt;&lt; &quot; &quot;;
</code></pre>
<p>**</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于]]></title>
        <id>https://elegancewang.github.io/CPlusPlusNote.github.io/post/about/</id>
        <link href="https://elegancewang.github.io/CPlusPlusNote.github.io/post/about/">
        </link>
        <updated>2019-01-25T11:09:48.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>欢迎来到我的小站呀，很高兴遇见你！🤝 #KTBFFH 💙 CHELSEA</p>
</blockquote>
<h2 id="关于本站">🏠 关于本站</h2>
<p>重新开始学习计算机语言，</p>
<h2 id="博主是谁">👨‍💻 博主是谁</h2>
<h2 id="兴趣爱好">⛹ 兴趣爱好</h2>
<p>CHELSEA、DOTA</p>
<h2 id="联系我呀">📬 联系我呀</h2>
<p>githubwrz@163.com</p>
]]></content>
    </entry>
</feed>